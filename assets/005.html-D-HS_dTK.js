import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as s,o as a}from"./app-BTnQ63EI.js";const n={};function l(d,t){return a(),i("div",null,[...t[0]||(t[0]=[s(`<h1 id="_005-标识符" tabindex="-1"><a class="header-anchor" href="#_005-标识符"><span>005 - 标识符</span></a></h1><h2 id="标识符的定义" tabindex="-1"><a class="header-anchor" href="#标识符的定义"><span>标识符的定义</span></a></h2><p>标识符是用来标识变量、函数、类等的名称。</p><p>在 JS 中所有可以由我们自主命名的都可以称为标识符。</p><p>标识符的命名规则：</p><ol><li><p>只能包含字母（<code>a-z</code>、<code>A-Z</code>）、数字（<code>0-9</code>）、下划线（<code>_</code>）和美元符号（<code>$</code>）</p><div class="hint-container tip"><p class="hint-container-title">正确示例</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> _b7</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> $c</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dE</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> $f3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div></div><div class="hint-container info"><p class="hint-container-title">提示</p><p>JS 底层保存标识符时实际上采用的是 Unicode 编码，所以理论上讲，所有的 UTF-8 编码的字符都可以作为标识符。 例如使用中文作为标识符：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 你好</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>但是，为了代码的可读性和可维护性，建议使用英文、数字和下划线来命名标识符。</p></div></div></li><li><p>不能以数字开头</p><div class="hint-container caution"><p class="hint-container-title">错误示例</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div></div></li><li><p>不能使用<a href="#javascript-%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97">关键字</a>和<a href="#javascript-%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97">保留字</a></p><div class="hint-container caution"><p class="hint-container-title">错误示例</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> var</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div></div></li></ol><h2 id="javascript-保留关键字" tabindex="-1"><a class="header-anchor" href="#javascript-保留关键字"><span>JavaScript 保留关键字</span></a></h2><h3 id="javascript-关键字" tabindex="-1"><a class="header-anchor" href="#javascript-关键字"><span>JavaScript 关键字</span></a></h3><p>Javascript 的保留关键字<strong>不可以</strong>用作变量、标签或者函数名。有些保留关键字是作为 Javascript 以后扩展使用。</p><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th></tr></thead><tbody><tr><td style="text-align:center;">abstract</td><td style="text-align:center;">arguments</td><td style="text-align:center;">boolean</td><td style="text-align:center;">break</td><td style="text-align:center;">byte</td></tr><tr><td style="text-align:center;">case</td><td style="text-align:center;">catch</td><td style="text-align:center;">char</td><td style="text-align:center;">class*</td><td style="text-align:center;">const</td></tr><tr><td style="text-align:center;">continue</td><td style="text-align:center;">debugger</td><td style="text-align:center;">default</td><td style="text-align:center;">delete</td><td style="text-align:center;">do</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">else</td><td style="text-align:center;">enum*</td><td style="text-align:center;">eval</td><td style="text-align:center;">export*</td></tr><tr><td style="text-align:center;">extends*</td><td style="text-align:center;">false</td><td style="text-align:center;">final</td><td style="text-align:center;">finally</td><td style="text-align:center;">float</td></tr><tr><td style="text-align:center;">for</td><td style="text-align:center;">function</td><td style="text-align:center;">goto</td><td style="text-align:center;">if</td><td style="text-align:center;">implements</td></tr><tr><td style="text-align:center;">import*</td><td style="text-align:center;">in</td><td style="text-align:center;">instanceof</td><td style="text-align:center;">int</td><td style="text-align:center;">interface</td></tr><tr><td style="text-align:center;">let</td><td style="text-align:center;">long</td><td style="text-align:center;">native</td><td style="text-align:center;">new</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;">package</td><td style="text-align:center;">private</td><td style="text-align:center;">protected</td><td style="text-align:center;">public</td><td style="text-align:center;">return</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">static</td><td style="text-align:center;">super*</td><td style="text-align:center;">switch</td><td style="text-align:center;">synchronized</td></tr><tr><td style="text-align:center;">this</td><td style="text-align:center;">throw</td><td style="text-align:center;">throws</td><td style="text-align:center;">transient</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">try</td><td style="text-align:center;">typeof</td><td style="text-align:center;">var</td><td style="text-align:center;">void</td><td style="text-align:center;">volatile</td></tr><tr><td style="text-align:center;">while</td><td style="text-align:center;">with</td><td style="text-align:center;">yield</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><blockquote><p>* 标记的关键字是 ECMAScript5 中新添加的。</p></blockquote><h3 id="javascript-对象、属性和方法" tabindex="-1"><a class="header-anchor" href="#javascript-对象、属性和方法"><span>JavaScript 对象、属性和方法</span></a></h3><p>您也应该<strong>避免使用</strong> JavaScript 内置的对象、属性和方法的名称作为 Javascript 的变量或函数名：</p><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th></tr></thead><tbody><tr><td style="text-align:center;">Array</td><td style="text-align:center;">Date</td><td style="text-align:center;">eval</td><td style="text-align:center;">function</td><td style="text-align:center;">hasOwnProperty</td></tr><tr><td style="text-align:center;">Infinity</td><td style="text-align:center;">isFinite</td><td style="text-align:center;">isNaN</td><td style="text-align:center;">isPrototypeOf</td><td style="text-align:center;">length</td></tr><tr><td style="text-align:center;">Math</td><td style="text-align:center;">NaN</td><td style="text-align:center;">name</td><td style="text-align:center;">Number</td><td style="text-align:center;">Object</td></tr><tr><td style="text-align:center;">prototype</td><td style="text-align:center;">String</td><td style="text-align:center;">toString</td><td style="text-align:center;">undefined</td><td style="text-align:center;">valueOf</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">关于 <code>name</code></p><p><code>name</code> 具有特殊之处，它不是 Javascript 的关键字，也不是保留字(保留字在某种意思上是为将来的关键字而保留的单词，因此保留字也不能被用作变量名或函数名) ，页面在 IE 浏览器上运行正常，但是 Safari , Chrome , Firefox 和 Opera 这些浏览器都给函数定义了一个<strong>非标准</strong>的 <code>name</code> 属性，是 window 的自带全局属性，所以在全局声明 <code>name</code> 变量名会出现访问异常问题</p></div><h3 id="window-保留关键字" tabindex="-1"><a class="header-anchor" href="#window-保留关键字"><span>Window 保留关键字</span></a></h3><p>JavaScript 可以在 HTML 外部使用。它可在许多其他应用程序中作为编程语言使用。</p><p>在 HTML 中，您必须（为了可移植性，您也应该这么做）<strong>避免使用</strong> HTML 和 Window 对象和属性的名称作为 Javascript 的变量及函数名：</p><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th></tr></thead><tbody><tr><td style="text-align:center;">alert</td><td style="text-align:center;">all</td><td style="text-align:center;">anchor</td><td style="text-align:center;">anchors</td></tr><tr><td style="text-align:center;">area</td><td style="text-align:center;">assign</td><td style="text-align:center;">blur</td><td style="text-align:center;">button</td></tr><tr><td style="text-align:center;">checkbox</td><td style="text-align:center;">clearInterval</td><td style="text-align:center;">clearTimeout</td><td style="text-align:center;">clientInformation</td></tr><tr><td style="text-align:center;">close</td><td style="text-align:center;">closed</td><td style="text-align:center;">confirm</td><td style="text-align:center;">constructor</td></tr><tr><td style="text-align:center;">crypto</td><td style="text-align:center;">decodeURI</td><td style="text-align:center;">decodeURIComponent</td><td style="text-align:center;">defaultStatus</td></tr><tr><td style="text-align:center;">document</td><td style="text-align:center;">element</td><td style="text-align:center;">elements</td><td style="text-align:center;">embed</td></tr><tr><td style="text-align:center;">embeds</td><td style="text-align:center;">encodeURI</td><td style="text-align:center;">encodeURIComponent</td><td style="text-align:center;">escape</td></tr><tr><td style="text-align:center;">event</td><td style="text-align:center;">fileUpload</td><td style="text-align:center;">focus</td><td style="text-align:center;">form</td></tr><tr><td style="text-align:center;">forms</td><td style="text-align:center;">frame</td><td style="text-align:center;">innerHeight</td><td style="text-align:center;">innerWidth</td></tr><tr><td style="text-align:center;">layer</td><td style="text-align:center;">layers</td><td style="text-align:center;">link</td><td style="text-align:center;">location</td></tr><tr><td style="text-align:center;">mimeTypes</td><td style="text-align:center;">navigate</td><td style="text-align:center;">navigator</td><td style="text-align:center;">frames</td></tr><tr><td style="text-align:center;">frameRate</td><td style="text-align:center;">hidden</td><td style="text-align:center;">history</td><td style="text-align:center;">image</td></tr><tr><td style="text-align:center;">images</td><td style="text-align:center;">offscreenBuffering</td><td style="text-align:center;">open</td><td style="text-align:center;">opener</td></tr><tr><td style="text-align:center;">option</td><td style="text-align:center;">outerHeight</td><td style="text-align:center;">outerWidth</td><td style="text-align:center;">packages</td></tr><tr><td style="text-align:center;">pageXOffset</td><td style="text-align:center;">pageYOffset</td><td style="text-align:center;">parent</td><td style="text-align:center;">parseFloat</td></tr><tr><td style="text-align:center;">parseInt</td><td style="text-align:center;">password</td><td style="text-align:center;">pkcs11</td><td style="text-align:center;">plugin</td></tr><tr><td style="text-align:center;">prompt</td><td style="text-align:center;">propertyIsEnum</td><td style="text-align:center;">radio</td><td style="text-align:center;">reset</td></tr><tr><td style="text-align:center;">screenX</td><td style="text-align:center;">screenY</td><td style="text-align:center;">scroll</td><td style="text-align:center;">secure</td></tr><tr><td style="text-align:center;">select</td><td style="text-align:center;">self</td><td style="text-align:center;">setInterval</td><td style="text-align:center;">setTimeout</td></tr><tr><td style="text-align:center;">status</td><td style="text-align:center;">submit</td><td style="text-align:center;">taint</td><td style="text-align:center;">text</td></tr><tr><td style="text-align:center;">textarea</td><td style="text-align:center;">top</td><td style="text-align:center;">unescape</td><td style="text-align:center;">untaint</td></tr><tr><td style="text-align:center;">window</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h3 id="html-事件句柄" tabindex="-1"><a class="header-anchor" href="#html-事件句柄"><span>HTML 事件句柄</span></a></h3><p>除此之外，您还应该<strong>避免使用</strong> HTML 事件句柄的名称作为 Javascript 的变量及函数名。</p><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th></tr></thead><tbody><tr><td style="text-align:center;">onblur</td><td style="text-align:center;">onclick</td><td style="text-align:center;">onerror</td><td style="text-align:center;">onfocus</td></tr><tr><td style="text-align:center;">onkeydown</td><td style="text-align:center;">onkeypress</td><td style="text-align:center;">onkeyup</td><td style="text-align:center;">onmouseover</td></tr><tr><td style="text-align:center;">onload</td><td style="text-align:center;">onmouseup</td><td style="text-align:center;">onmousedown</td><td style="text-align:center;">onsubmit</td></tr></tbody></table><blockquote><p>引用自<a href="https://www.runoob.com/js/js-reserved.html" target="_blank" rel="noopener noreferrer">JavaScript 保留关键字 | 菜鸟教程</a></p></blockquote><h2 id="驼峰命名法" tabindex="-1"><a class="header-anchor" href="#驼峰命名法"><span>驼峰命名法</span></a></h2><p>驼峰命名法（<code>camelCase</code>）是一种命名约定，用于将多个单词组合成一个变量或函数名。</p><p>这种命名法的优势是可以更清晰地表示变量或函数的功能，同时也符合 JavaScript 的命名规范。</p><p>驼峰命名法的规则如下：</p><ol><li>第一个单词的首字母小写</li><li>每个后续单词的首字母大写</li><li>不使用空格、下划线或破折号分隔单词</li></ol><p>例如：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> myVariable</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;hello world&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hello world&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div>`,30)])])}const c=e(n,[["render",l]]),p=JSON.parse('{"path":"/study/javascript/005.html","title":"005 - 标识符","lang":"zh-CN","frontmatter":{"title":"005 - 标识符","category":"笔记","tags":["Javascript","语法"],"description":"005 - 标识符 标识符的定义 标识符是用来标识变量、函数、类等的名称。 在 JS 中所有可以由我们自主命名的都可以称为标识符。 标识符的命名规则： 只能包含字母（a-z、A-Z）、数字（0-9）、下划线（_）和美元符号（$） 正确示例 提示 JS 底层保存标识符时实际上采用的是 Unicode 编码，所以理论上讲，所有的 UTF-8 编码的字符都可...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"005 - 标识符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-18T08:49:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chairowell\\",\\"url\\":\\"https://nekoblog.chairo.cc\\"}]}"],["meta",{"property":"og:url","content":"https://nekoblog.chairo.cc/study/javascript/005.html"}],["meta",{"property":"og:site_name","content":"NekoBlog"}],["meta",{"property":"og:title","content":"005 - 标识符"}],["meta",{"property":"og:description","content":"005 - 标识符 标识符的定义 标识符是用来标识变量、函数、类等的名称。 在 JS 中所有可以由我们自主命名的都可以称为标识符。 标识符的命名规则： 只能包含字母（a-z、A-Z）、数字（0-9）、下划线（_）和美元符号（$） 正确示例 提示 JS 底层保存标识符时实际上采用的是 Unicode 编码，所以理论上讲，所有的 UTF-8 编码的字符都可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-18T08:49:57.000Z"}],["meta",{"property":"article:tag","content":"语法"}],["meta",{"property":"article:tag","content":"Javascript"}],["meta",{"property":"article:modified_time","content":"2025-09-18T08:49:57.000Z"}]]},"git":{"createdTime":1758185397000,"updatedTime":1758185397000,"contributors":[{"name":"chairowell","username":"chairowell","email":"chairowell@gmail.com","commits":1,"url":"https://github.com/chairowell"}]},"readingTime":{"minutes":3.26,"words":977},"filePathRelative":"study/javascript/005.md","excerpt":"\\n<h2>标识符的定义</h2>\\n<p>标识符是用来标识变量、函数、类等的名称。</p>\\n<p>在 JS 中所有可以由我们自主命名的都可以称为标识符。</p>\\n<p>标识符的命名规则：</p>\\n<ol>\\n<li>\\n<p>只能包含字母（<code>a-z</code>、<code>A-Z</code>）、数字（<code>0-9</code>）、下划线（<code>_</code>）和美元符号（<code>$</code>）</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">正确示例</p>\\n<div class=\\"language-js\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> a</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> _b7</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> $c</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 3</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> dE</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 4</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> $f3</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 5</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n</div></div>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>JS 底层保存标识符时实际上采用的是 Unicode 编码，所以理论上讲，所有的 UTF-8 编码的字符都可以作为标识符。\\n例如使用中文作为标识符：</p>\\n<div class=\\"language-js\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 你好</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n</div><div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>但是，为了代码的可读性和可维护性，建议使用英文、数字和下划线来命名标识符。</p>\\n</div>\\n</div>\\n</li>\\n<li>\\n<p>不能以数字开头</p>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">错误示例</p>\\n<div class=\\"language-js\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">a</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n</div></div>\\n</li>\\n<li>\\n<p>不能使用<a href=\\"#javascript-%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97\\">关键字</a>和<a href=\\"#javascript-%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97\\">保留字</a></p>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">错误示例</p>\\n<div class=\\"language-js\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> var</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n</div></div>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,p as data};
